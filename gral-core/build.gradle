description = 'GRAL core'

dependencies {
	testCompile(group: 'junit', name: 'junit', version: '4.12')
}

buildscript {
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath 'net.saliman:gradle-cobertura-plugin:2.2.5'
	}
}

apply plugin: 'net.saliman.cobertura'
task report {
	dependsOn = ['cobertura', check]
	description = 'Generates reports.'
	group = 'Report'

	tasks.withType(Pmd).each {pmdTask ->
		pmdTask.ignoreFailures = true
	}
	tasks.withType(Checkstyle).each {checkstyleTask ->
		checkstyleTask.ignoreFailures = true
		checkstyleTask.showViolations = false
	}
}

task shrinkJar(type: proguard.gradle.ProGuardTask, dependsOn: jar) {
	description = 'Uses ProGuard to reduce the code size of this project.'
	group = 'Build'
	// Configure ProGuard
	configuration("${projectDir}/src/etc/proguard.conf")
	target(targetCompatibility.toString())
	injars(jar.archivePath)
	outjars("${libsDir}/shrunk/${jar.archiveName}")
	libraryjars(runtimeJar)
	libraryjars(configurations.runtime)
}

task javadocJar(type: Jar) {
	description = 'Assembles a jar archive containing the API doc.'
	group = 'Build'
	from javadoc
	classifier 'javadoc'
}

apply plugin: 'maven'
apply plugin: 'signing'

artifacts {
	archives shrinkJar.getOutJarFileCollection().getSingleFile(), sourceJar, javadocJar
}

signing {
	sign configurations.archives
}

uploadArchives {
	repositories {
		mavenDeployer {
			beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }

			repository(url: 'https://oss.sonatype.org/service/local/staging/deploy/maven2/') {
				authentication(userName: ossrhUsername, password: ossrhPassword)
			}

			snapshotRepository(url: 'https://oss.sonatype.org/content/repositories/snapshots/') {
				authentication(userName: ossrhUsername, password: ossrhPassword)
			}

			pom.project {
				name rootProject.name
				packaging 'jar'
				description rootProject.description
				url website
				inceptionYear inceptionYear
				licenses {
					license {
						name 'GNU Library or Lesser General Public License (LGPL)'
						url 'http://www.gnu.org/licenses/lgpl.txt'
					}
				}
				developers {
					developer {
						id owner1_id
						name owner1_name
						email owner1_email
					}
					developer {
						id owner2_id
						name owner2_name
						email owner2_email
					}
				}
				scm {
					connection 'scm:git:git://github.com/eseifert/gral.git'
					developerConnection 'scm:git:git@github.com:eseifert/gral.git'
					url website
				}
				issueManagement {
					system 'GitHub Issues'
					url website
				}
			}
		}
	}
}
signArchives.dependsOn(shrinkJar)

// Include the proguard-gradle plugin
buildscript {
	repositories {
		mavenLocal()
		mavenCentral()
	}
	dependencies {
		classpath(group: 'net.sf.proguard', name: 'proguard-gradle', version: '5.2.+')
	}
}
