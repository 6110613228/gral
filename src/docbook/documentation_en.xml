<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE article
  PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">
<book xmlns="http://docbook.org/ns/docbook">
<info>
	<title>GRAL Documentation</title>
	<author><firstname>Michael</firstname><surname>Seifert</surname></author>
	<copyright><year>2010</year><holder>Michael Seifert</holder></copyright>
</info>

<chapter>
	<title>Data administration</title>
	<para>The first step, before we are able to plot anything, is to load or create data, a process which GRAL provides several ways for. The basic interface that will be used when you have to provide data is the DataSource interface. Think of it as a table with a (theoretically) arbitrary number of rows and columns. Every column has its own data type, but only Number values are allowed. The functions a DataSource provides are solely for retrieving data rows, but it also supports statistics on the contained data, as well as the capability to listen for data changes. The following sections describe the different ways for providing and manipulating data.</para>

	<sect1>
		<title>Creating data</title>
		<para>Assuming you have computed some values you want to plot, how can you store your data in a DataSource? You can do so through the DataTable class. DataTable is an implementation of DataSource (or AbstractDataSource to be more precise) and supports adding rows. The values must match the number of columns and their types, which both had already been specified in the constructor.</para>

		<example>
			<title>Populating a DataTable</title>
			<programlisting language="java"><![CDATA[
// Create the table with the specified column types
DataTable table = new DataTable(Double.class, Double.class);

// Iterate your available data. In this case, data is an Iterable<Double[]>;
for (Double[] coords : data) {
    double x = coords[0];
    double y = coords[1];
    table.add(x, y);
}
]]></programlisting>
		</example>

		<para>You might want to have a DataTable for testing purposes only and do not want to create random values for it at each start. In this case, the DummyData class is your remedy. DummyData is a DataSource filled with a single value. As I already mentioned, this is not used very often, but suited very well for testing due to its efficiency, especially, when dealing with large tables.</para>
		<example>
			<title>Generating dummy data</title>
			<programlisting language="java"><![CDATA[
DummyData data = new DummyData(3, 100, 42.0);
]]></programlisting>
		</example>
	</sect1>

	<sect1>
		<title>Sorting data</title>

		<example>
			<title>Sorting</title>
			<programlisting language="java"><![CDATA[
// Sort the primary column (1) ascending,
// the secondary column (0) descending, and
// the ternary column (2) ascending
table.sort(new Ascending(1), new Descending(0), new Ascending(2));
]]></programlisting>
		</example>
	</sect1>

	<sect1>
		<title>Filtering data</title>

		<sect2>
			<title>Filtering columns</title>
			<example>
				<title>Creation of data series</title>
				<programlisting language="java"><![CDATA[
// Create a new series from columns 0 and 1
DataSeries series1 = new DataSeries("Series 1", table, 0, 1);
// Create a new series from columns 2 and 0
DataSeries series2 = new DataSeries("Series 2", table, 2, 0);
// Create a new series from column 1
DataSeries series3 = new DataSeries("Series 3", table, 1);
]]></programlisting>
			</example>
		</sect2>

		<sect2>
			<title>Filtering rows</title>
			<example>
				<title>Filtering rows with DataSubSet</title>
				<programlisting language="java"><![CDATA[
// Leave out rows where column 1 has an even value
DataSubset data = new DataSubset(table) {
    @Override
    public boolean accept(Number[] row) {
        return (row[0].doubleValue() % 2.0) == 0.0;
    }
};
]]></programlisting>
			</example>
		</sect2>

		<sect2>
			<title>Convolution</title>
			<example>
				<title>Moving average</title>
				<programlisting language="java"><![CDATA[
// Create moving average of width 3
Kernel kernel = new Kernel(1.0, 1.0, 1.0);
// Filter columns 0 and 1
Convolution filter = new Convolution(table, kernel, Filter.Mode.MODE_OMIT, 0, 1);
]]></programlisting>
			</example>
		</sect2>
	</sect1>

	<sect1>
		<title>Importing data</title>
		<example>
			<title>Import example</title>
			<programlisting language="java"><![CDATA[
DataReader reader.read = DataReaderFactory.getInstance().getReader("text/csv");
FileInputStream file = new FileInputStream("foobar.csv");
DataSource data = reader.read(file);
]]></programlisting>
		</example>
	</sect1>

	<sect1>
		<title>Exporting data</title>
		<example>
			<title>Export example</title>
			<programlisting language="java"><![CDATA[
DataWriter writer = DataWriterFactory.getInstance().getWriter("text/csv");
FileOutputStream file = new FileOutputStream("foobar.csv");
writer.write(table, file);
]]></programlisting>
		</example>
	</sect1>

	<sect1>
		<title>Statistics</title>
		<example>
			<title>Getting the maximum of column 1</title>
			<programlisting language="java"><![CDATA[
Statistics stats = table.getStatistics();
stats.get(Statistics.MEAN, 1);
]]></programlisting>
		</example>
	</sect1>
</chapter>

<chapter>
	<title>Displaying data</title>

	<sect1>
		<title>Plot types</title>

		<sect2>
			<title>XY-Plot</title>
			<example>
				<title>Creating an XYPlot</title>
				<programlisting language="java"><![CDATA[
Plot plot = new XYPlot(series1, series2);
]]></programlisting>
			</example>

			<sect3>
				<title>Legends</title>
				<example>
					<title>Creating a scatter plot</title>
					<programlisting language="java"><![CDATA[
plot.setSetting(Plot.KEY_LEGEND, true);
plot.setSetting(Plot.KEY_LEGEND_LOCATION, Location.SOUTH_WEST);
plot.getLegend().setSetting(Legend.KEY_ORIENTATION, Orientation.HORIZONTAL);
]]></programlisting>
				</example>
			</sect3>
		</sect2>

		<sect2>
			<title>Bar plot</title>
			<example>
				<title>Creating a bar plot</title>
				<programlisting language="java"><![CDATA[
Plot plot = new BarPlot(series);
]]></programlisting>
			</example>
		</sect2>

		<sect2>
			<title>Pie plot</title>
			<example>
				<title>Creating a pie plot</title>
				<programlisting language="java"><![CDATA[
Plot plot = new PiePlot(series);
]]></programlisting>
			</example>
		</sect2>
	</sect1>

	<sect1>
		<title>Customizing the plot</title>
	</sect1>

	<sect1>
		<title>Customizing axes</title>
	</sect1>

	<sect1>
		<title>Customizing shapes</title>
	</sect1>

	<sect1>
		<title>Customizing lines</title>
	</sect1>

	<sect1>
		<title>Exporting plots</title>
	</sect1>
</chapter>

<chapter>
	<title>Expanding the library</title>

	<sect1>
		<title>Custom plots</title>
	</sect1>

	<sect1>
		<title>Custom plot writers</title>
	</sect1>
</chapter>

<chapter>
   <title>Limitations</title>
</chapter>
</book>